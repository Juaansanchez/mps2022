Métodos de prueba de la clase "DequeNodeTest":

	
		- public void shouldReturnPreviousIsNullIfFirst:
		Método que comprueba que el nodo previo al primer nodo de una lista es null.


		- public void shouldReturnNextIsNullIfLast:
		Método que comprueba que el nodo siguiente al último nodo de una lista es null.

	
		- public void shouldReturnTrueIfIsNotATerminalNode:
		Método que comprueba que un nodo es no terminal.

	
		- shouldToStringReturnANonNullString:
		Método que comprueba que el toString de un nodo no devuelve un string nulo.	
	
	
		- shouldGetItemReturnAnItemIfSetThatItemPreviously:
		Método que comprueba que el setItem de un nodo coloca correctamente ese item en el nodo.		




Métodos de prueba de la clase "DoubleLinkedListQueueTest":
	

	Funcionalidad a probar

	- Añadir
    
		.--- checkAppendNodeEmptyList:
		Método que comprueba que un nodo se añade correctamente a una lista vacía.

		.--- checkAppendNodeNonEmptyList:
    		Método que comprueba que un nodo se añade correctamente a una lista no vacía por el final.

		.--- checkAppendLeftNodeNonEmptyList:
		Método que comprueba que un nodo se añade correctamente a una lista no vacía por el principio.

		.--- checkAppendLeftNodeEmptyList:
		Método que comprueba que un nodo se añade correctamente a una lista vacía por el principio.



	- Borrar
    
		.--- checkDeleteFirstNodeListSizeGreaterThan2:
		Método que comprueba que el primer nodo de una lista de tamaño mayor que 2 se elimina correctamente. (deleteFirst)

		.--- checkDeleteFirstNodeListSizeEquals2:
		Método que comprueba que el primer nodo de una lista de tamaño 2 se elimina correctamente. (deleteFirst)

		.--- checkDeleteLastNodeListSizeEquals2:
		Método que comprueba que el último nodo de una lista de tamaño 2 se elimina correctamente. (deleteLast)

		.--- checkDeleteLastNodeListSizeGreaterThan2:
		Método que comprueba que el último nodo de una lista de tamaño mayor que 2 se elimina correcamente. (deleteLast)

		.--- checkDeleteAMiddleNodeWhereListSizeGreaterThan2:
		Método que comprueba que un nodo intermedio de una lista de tamaño mayor que 2 se elimina correctamente. (delete)

		.--- checkDeleteTheLastNodeWhereListSizeEquals2:
		Método que comprueba que el último nodo de una lista de tamaño 2 se elimina correctamente. (delete)

		.--- checkDeleteTheFirstNodeWhereListSizeEquals2:
		Método que comprueba que el primer nodo de una lista de tamaño 2 se elimina correctamente. (delete)

		.--- checkDeleteFirstNodeListSizeEqualsOne:
		Método que comprueba que el primer nodo de una lista de tamaño 1 se elimina correctamente.

		.--- checkDeleteLastNodeListSizeEqualsOne:
		Método que comprueba que el último nodo de una lista de tamaño 1 se elimina correctamente.




	- Métodos getters

		.--- checkPeekFirst:
		Método que comprueba que devuelve correctamente el primer elemento de la lista.

		.--- checkPeekLast:
		Método que comprueba que devuelve correctamente el último elemento de la lista.

		.--- checkGetAtPosition1ShouldReturnNode2:
		Método que comprueba que el método getAt al pasarle la posición 1, devuelve el segundo nodo de la lista.




	- Buscar
		.--- checkFindAnObjectOnANonEmptyList:
		Método que comprueba que al buscar un objeto entre los nodos de una lista no vacía, lo encuentra correctamente.




	- Lanzamiento de excepciones

		.--- checkGetAtPositionShouldRaiseAnExceptionIfNumberUnder0:
		Método que comprueba que el método getAt lanza una excepción si se le pasa como argumento un índice negativo.

		.--- checkGetAtPositionOnAEmptyListShouldRaiseAnException:
		Método que comprueba que al pedir el elemento de una posición cualquiera (0 en este caso) en una lista vacía se lanza una excepción.

		.--- checkGetAtPositionShouldRaiseAnExceptionIfNumberGreaterThanSize:
		Método que comprueba que el método getAt lanza una excepción si se le pasa como argumento un índice más grande que el tamaño de la lista.

		.--- checkDeleteOnAEmptyListShouldRaiseAnException:
		Método que comprueba que al eliminar un elemento de una lista vacía se lanza una excepción.

		.--- checkDeleteFirstOnAEmptyListRaiseAnException:
		Método que comprueba que al eliminar el primer elemento de una lista vacía se lanza una excepción.

		.--- checkDeleteLastOnAEmptyListRaiseAnException:
		Método que comprueba que al eliminar el último elemento de una lista vacía se lanza una excepción.

		.--- checkPeekFirstOnAEmptyListRaiseAnException:
		Método que comprueba que al pedir el primer elemento de una lista vacía se lanza una excepción.

		.--- checkPeekLastOnAEmptyListRaiseAnException:
		Método que comprueba que al pedir el último elemento de una lista vacía se lanza una excepción.

		.--- checkDeleteANodeThatIsNotInTheListShouldRaiseAnException:
		Método que comprueba que al eliminar un nodo que no está en la lista se lanza una excepción.
		
		.--- checkFindOnAEmptyListRaiseAnException:
		Método que comprueba que al buscar un nodo en una lista vacía se lanza una excepción.

		.--- checkFindAnObjectThatIsNotInTheListRaiseAnException:
		Método que comprueba que al buscar en una lista con elementos un nodo que no está en la lista se lanza una excepción.















































